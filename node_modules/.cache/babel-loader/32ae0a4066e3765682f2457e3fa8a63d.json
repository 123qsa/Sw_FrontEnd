{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport qs from \"qs\";\nexport default {\n  name: \"Login\",\n  data: function data() {\n    return {\n      form: {\n        username: \"\",\n        password: \"\"\n      }\n    };\n  },\n  methods: {\n    login: function login() {\n      var _this = this;\n\n      if (this.form.username === \"\" || this.form.password === \"\") {\n        this.$message.warning(\"请输入用户名和密码！\");\n        return;\n      }\n\n      if (!/^\\w+$/.exec(this.form.username) || !/^\\w+$/.exec(this.form.password)) {\n        this.$message.warning(\"请检查用户名和密码的输入\");\n        return;\n      } //window.alert(\"用户名是：\"+this.username +\" 密码是：\" +this.password);\n\n\n      this.$axios({\n        method: \"post\"\n        /* 指明请求方式，可以是 get 或 post */\n        ,\n        url: \"/user/login\"\n        /* 指明后端 api 路径，由于在 main.js 已指定根路径，因此在此处只需写相对路由 */\n        ,\n        data: qs.stringify({\n          /* 需要向后端传输的数据，此处使用 qs.stringify 将 json 数据序列化以发送后端 */\n          username: this.form.username,\n          password: this.form.password\n        })\n      }).then(function (res) {\n        /* res 是 response 的缩写 */\n        switch (res.data.status_code) {\n          case 200:\n            _this.$message.success(\"登录成功！\");\n            /* 将后端返回的 user 信息使用 vuex 存储起来 */\n\n\n            _this.$store.dispatch(\"saveUserInfo\", {\n              user: {\n                username: res.data.username,\n                token: res.data.token,\n                userId: res.data.user_id\n              }\n            });\n            /* 从 localStorage 中读取 preRoute 键对应的值 */\n\n\n            var history_pth = localStorage.getItem(\"preRoute\");\n            /* 若保存的路由为空或为注册路由，则跳转首页；否则跳转前路由（setTimeout表示1000ms后执行） */\n\n            setTimeout(function () {\n              if (history_pth == null || history_pth === \"/register\") {\n                _this.$router.push(\"/\");\n              } else {\n                _this.$router.push({\n                  path: history_pth\n                });\n              }\n            }, 1000);\n            break;\n\n          case 401:\n            _this.$message.error(\"用户名不存在！\");\n\n            break;\n\n          case 402:\n            _this.$message.error(\"密码错误！\");\n\n            break;\n        }\n      }).catch(function (err) {\n        console.log(err);\n        /* 若出现异常则在终端输出相关信息 */\n      });\n    },\n    toRegister: function toRegister() {\n      this.$router.push(\"/register\");\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;AACA;EACAA,aADA;EAEAC,IAFA,kBAEA;IACA;MACAC;QACAC,YADA;QAEAC;MAFA;IADA;EAMA,CATA;EAUAC;IACAC,KADA,mBACA;MAAA;;MACA;QACA;QACA;MACA;;MACA,IACA,qCACA,iCAFA,EAGA;QACA;QACA;MACA,CAXA,CAYA;;;MACA;QACAC;QAAA;QADA;QAEAC;QAAA;QAFA;QAGAP;UACA;UACAE,4BAFA;UAGAC;QAHA;MAHA,GASAK,IATA,CASA;QACA;QACA;UACA;YACA;YACA;;;YACA;cACAC;gBACAP,2BADA;gBAEAQ,qBAFA;gBAGAC;cAHA;YADA;YAQA;;;YACA;YACA;;YACAC;cACA;gBACA;cACA,CAFA,MAEA;gBACA;kBAAAC;gBAAA;cACA;YACA,CANA,EAMA,IANA;YAOA;;UAEA;YACA;;YACA;;UACA;YACA;;YACA;QA7BA;MA+BA,CA1CA,EA2CAC,KA3CA,CA2CA;QACAC;QAAA;MACA,CA7CA;IA8CA,CA5DA;IA6DAC,UA7DA,wBA6DA;MACA;IACA;EA/DA;AAVA","names":["name","data","form","username","password","methods","login","method","url","then","user","token","userId","setTimeout","path","catch","console","toRegister"],"sourceRoot":"src/views/Login","sources":["index.vue"],"sourcesContent":["<template>\r\n  <div class=\"login\">\r\n    <img class=\"vue\" src=\"../assets/logo.png\" />\r\n    <img\r\n      class=\"bg-box\"\r\n      src=\"../assets/4d3ea53c084bad6931a56d5158a48jpeg.jpeg\"\r\n    />\r\n    <div class=\"kuang\">\r\n      <h1>登&nbsp;录</h1>\r\n      <el-form ref=\"form\" :model=\"form\" class=\"form\">\r\n        <el-form-item\r\n          prop=\"username\"\r\n          :rules=\"[{ required: true, message: '用户名不能为空' }]\"\r\n        >\r\n          <el-input\r\n            v-model=\"form.username\"\r\n            placeholder=\"用户名或邮箱\"\r\n            type=\"username\"\r\n            autocomplete=\"off\"\r\n            clearable\r\n            prefix-icon=\"el-icon-postcard\"\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-form-item\r\n          id=\"password\"\r\n          prop=\"password\"\r\n          :rules=\"[{ required: true, message: '密码不能为空' }]\"\r\n        >\r\n          <el-input\r\n            prefix-icon=\"el-icon-lock\"\r\n            placeholder=\"密码\"\r\n            show-password\r\n            type=\"password\"\r\n            clearable\r\n            v-model=\"form.password\"\r\n            autocomplete=\"off\"\r\n            @keyup.enter.native=\"login\"\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button class=\"btn_login\" type=\"primary\" @click=\"login\" round\r\n            >登&nbsp;&nbsp;录</el-button\r\n          >\r\n        </el-form-item>\r\n      </el-form>\r\n      <div class=\"regis\" @click=\"toRegister\">注册账号</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport qs from \"qs\";\r\nexport default {\r\n  name: \"Login\",\r\n  data() {\r\n    return {\r\n      form: {\r\n        username: \"\",\r\n        password: \"\",\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    login() {\r\n      if (this.form.username === \"\" || this.form.password === \"\") {\r\n        this.$message.warning(\"请输入用户名和密码！\");\r\n        return;\r\n      }\r\n      if (\r\n        !/^\\w+$/.exec(this.form.username) ||\r\n        !/^\\w+$/.exec(this.form.password)\r\n      ) {\r\n        this.$message.warning(\"请检查用户名和密码的输入\");\r\n        return;\r\n      }\r\n      //window.alert(\"用户名是：\"+this.username +\" 密码是：\" +this.password);\r\n      this.$axios({\r\n        method: \"post\" /* 指明请求方式，可以是 get 或 post */,\r\n        url: \"/user/login\" /* 指明后端 api 路径，由于在 main.js 已指定根路径，因此在此处只需写相对路由 */,\r\n        data: qs.stringify({\r\n          /* 需要向后端传输的数据，此处使用 qs.stringify 将 json 数据序列化以发送后端 */\r\n          username: this.form.username,\r\n          password: this.form.password,\r\n        }),\r\n      })\r\n        .then((res) => {\r\n          /* res 是 response 的缩写 */\r\n          switch (res.data.status_code) {\r\n            case 200:\r\n              this.$message.success(\"登录成功！\");\r\n              /* 将后端返回的 user 信息使用 vuex 存储起来 */\r\n              this.$store.dispatch(\"saveUserInfo\", {\r\n                user: {\r\n                  username: res.data.username,\r\n                  token: res.data.token,\r\n                  userId: res.data.user_id,\r\n                },\r\n              });\r\n\r\n              /* 从 localStorage 中读取 preRoute 键对应的值 */\r\n              const history_pth = localStorage.getItem(\"preRoute\");\r\n              /* 若保存的路由为空或为注册路由，则跳转首页；否则跳转前路由（setTimeout表示1000ms后执行） */\r\n              setTimeout(() => {\r\n                if (history_pth == null || history_pth === \"/register\") {\r\n                  this.$router.push(\"/\");\r\n                } else {\r\n                  this.$router.push({ path: history_pth });\r\n                }\r\n              }, 1000);\r\n              break;\r\n\r\n            case 401:\r\n              this.$message.error(\"用户名不存在！\");\r\n              break;\r\n            case 402:\r\n              this.$message.error(\"密码错误！\");\r\n              break;\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err); /* 若出现异常则在终端输出相关信息 */\r\n        });\r\n    },\r\n    toRegister() {\r\n      this.$router.push(\"/register\");\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.vue {\r\n  display: block;\r\n  opacity: 0.75;\r\n  width: 35px;\r\n  height: 35px;\r\n  margin: 10px auto 0 auto;\r\n}\r\n.bg-box {\r\n  display: block;\r\n  opacity: 1;\r\n  z-index: -3; /* 在第三层 */\r\n  position: fixed; /*页面不会滚动 */\r\n  right: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  /* transition: opacity 1s,transform .25s,filter .25s; */\r\n  /* backface-visibility: hidden; */\r\n}\r\n.kuang {\r\n  width: 300px;\r\n  height: 315px;\r\n  padding: 0 25px;\r\n  background-color: rgba(255, 255, 255, 0.85);\r\n  margin: 21px auto;\r\n  border-radius: 25px;\r\n  line-height: 80px; /*可以让文字往下移一点 */\r\n  position: relative;\r\n}\r\n.login {\r\n  font-family: \"Noto Serif SC\", serif;\r\n}\r\n.login >>> .el-input__inner {\r\n  font-family: \"Noto Serif SC\", serif;\r\n}\r\n.btn_login {\r\n  width: 100%;\r\n  margin-top: 5px;\r\n  font-family: \"Noto Serif SC\", serif;\r\n}\r\n.regis {\r\n  float: right;\r\n  margin-top: -34px;\r\n  color: #999;\r\n  cursor: pointer;\r\n}\r\n.regis {\r\n  float: right;\r\n  margin-top: -34px;\r\n  color: #999;\r\n  cursor: pointer;\r\n}\r\n.regis:hover {\r\n  color: blue;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}